// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertHandlerClient is the client API for AlertHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertHandlerClient interface {
	GetAlerts(ctx context.Context, in *GetAlertsParams, opts ...grpc.CallOption) (*Alerts, error)
}

type alertHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertHandlerClient(cc grpc.ClientConnInterface) AlertHandlerClient {
	return &alertHandlerClient{cc}
}

func (c *alertHandlerClient) GetAlerts(ctx context.Context, in *GetAlertsParams, opts ...grpc.CallOption) (*Alerts, error) {
	out := new(Alerts)
	err := c.cc.Invoke(ctx, "/pb.AlertHandler/GetAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertHandlerServer is the server API for AlertHandler service.
// All implementations must embed UnimplementedAlertHandlerServer
// for forward compatibility
type AlertHandlerServer interface {
	GetAlerts(context.Context, *GetAlertsParams) (*Alerts, error)
	mustEmbedUnimplementedAlertHandlerServer()
}

// UnimplementedAlertHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAlertHandlerServer struct {
}

func (UnimplementedAlertHandlerServer) GetAlerts(context.Context, *GetAlertsParams) (*Alerts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlerts not implemented")
}
func (UnimplementedAlertHandlerServer) mustEmbedUnimplementedAlertHandlerServer() {}

// UnsafeAlertHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertHandlerServer will
// result in compilation errors.
type UnsafeAlertHandlerServer interface {
	mustEmbedUnimplementedAlertHandlerServer()
}

func RegisterAlertHandlerServer(s grpc.ServiceRegistrar, srv AlertHandlerServer) {
	s.RegisterService(&AlertHandler_ServiceDesc, srv)
}

func _AlertHandler_GetAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertHandlerServer).GetAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AlertHandler/GetAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertHandlerServer).GetAlerts(ctx, req.(*GetAlertsParams))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertHandler_ServiceDesc is the grpc.ServiceDesc for AlertHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AlertHandler",
	HandlerType: (*AlertHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlerts",
			Handler:    _AlertHandler_GetAlerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alert.proto",
}
