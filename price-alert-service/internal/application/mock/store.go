// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/micheltank/crypto-price-alert/price-alert-service/internal/domain"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(alert domain.Alert) (domain.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", alert)
	ret0, _ := ret[0].(domain.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(alert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), alert)
}

// GetAlertsAtPrice mocks base method.
func (m *MockRepository) GetAlertsAtPrice(coin string, price float64) (domain.Alerts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertsAtPrice", coin, price)
	ret0, _ := ret[0].(domain.Alerts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertsAtPrice indicates an expected call of GetAlertsAtPrice.
func (mr *MockRepositoryMockRecorder) GetAlertsAtPrice(coin, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertsAtPrice", reflect.TypeOf((*MockRepository)(nil).GetAlertsAtPrice), coin, price)
}

// List mocks base method.
func (m *MockRepository) List(email string) (domain.Alerts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", email)
	ret0, _ := ret[0].(domain.Alerts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), email)
}
