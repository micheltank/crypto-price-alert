// Code generated by MockGen. DO NOT EDIT.
// Source: notification_api.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
reflect "reflect"

gomock "github.com/golang/mock/gomock"
domain "github.com/micheltank/crypto-price-alert/price-alert-job/internal/domain"
)

// MockNotificationBroker is a mock of NotificationBroker interface.
type MockNotificationBroker struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationBrokerMockRecorder
}

// MockNotificationBrokerMockRecorder is the mock recorder for MockNotificationBroker.
type MockNotificationBrokerMockRecorder struct {
	mock *MockNotificationBroker
}

// NewMockNotificationBroker creates a new mock instance.
func NewMockNotificationBroker(ctrl *gomock.Controller) *MockNotificationBroker {
	mock := &MockNotificationBroker{ctrl: ctrl}
	mock.recorder = &MockNotificationBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationBroker) EXPECT() *MockNotificationBrokerMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockNotificationBroker) SendEmail(notification domain.EmailNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockNotificationBrokerMockRecorder) SendEmail(notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockNotificationBroker)(nil).SendEmail), notification)
}

